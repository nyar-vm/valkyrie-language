# Valkyrie Language


## 设计目标

Valkyrie 是一门具有渐进类型的动态语言,

Valkyrie 的设计目标是灵活, 简洁以及高度的一致性

其血缘来自 Rust, Scala 以及 Swift.

接下来介绍 Valkyrie 的主要特性

## 扩展

如果没有扩展, 那么 V 是一门很死板很严格的语言.

严格的令人难受, `1 + 1.0`, `"a" + 'b'`, `[1] ++ 2`, 统统算不了.

扩展赋予了 V 高度的灵活性与可能性.

默认会载入名为 Prelude 的扩展, Prelude 中定义了一些常用的合理的运算规则.

extension 可以继承和重写, 你可以也定义自己的 Prelude, 然后形成自己的代码风格.

V 中所有的语法糖都由对应的 trait 来静态决策, 以此来免除不必要运行时开销

### 孤儿规则

如果你想扩展一个方法, 要么类是在你的库中定义的, 要么特质是在你的库中定义的

否则只能在 extension package namespace 中修改

这一规则是为了防止在不知情的情况下引入未知的语义

````valkyrie
/// Namespace is generally lowercase, but extension is uppercase
/// Because the performance is similar to the introduce a trait
pkg extension Features;
````

### 符号重载

最常见的应用是符号重载, 当你要整合两个第三方库类型转换时, 经常会被孤儿规则禁止.

因此需要声明 extension 来实现兼容.

还有一种情况是某个运算是方便的, 但可能不是很严格.

比如我们一般默认加法服从交换律, 但是 `"a" + "b" != "b" + "a"` 破坏了交换律.

于是可以将选择权交给库用户.

````valkyrie
/// Otherwise, all it will inherit all extensions in the current namespace
@no_prelude
pkg extension FreeAdd {
    /// Symbols are defined in the standard library
    /// Types are also defined in the standard library
    /// Overloading is prohibited by the orphan rule
    /// Ordinary overload does not need extension
    def +(i: Integer, f: Decimal) {
        /// The function will return automatically
        /// The return type is automatically inferred
        i as Decimal + f
    }
}
````

### 数字模式

有时候我们想输入一些特殊的数值, 比如带单位的运算, 如果用构造器很可能让代码失去可读性.

这种情况下可以用数字模式, 数字模式是后缀形式的.

````valkyrie
tagged Quality {
    Kilogram(auto Decimal),
    Gram(auto Decimal),
}
def +(lhs: Quality, rhg: Quality): Quality {
    /// Some conversion rules, that's it, anyone can write
    @unimplemented()
}

pkg extension SIUnit {
    /// number_suffix means integer_suffix + decimal_suffix
    def number_suffix kg(n): Quality = Quality::Kilogram(n);
    def number_suffix  g(n): Quality = Quality::Gram(n);
}
````

然后你就可以写如下写法了!

````valkyrie
use SIUnit;
let weight = 1kg + 1g;
````

以此类推, 你应该能很轻易的实现下列功能, 这就是 Valkyrie 一致性的体现.

````valkyrie
use Complex;
let z = 1 + 2i;
/// Note that you cannot bind `i` twice in one namespace
use Quaternion;
let q = 1 + 2i + 3j + 4k;
````

### 字符串模式

字符串也是个很复杂的东西, 众口难调, 不同的人喜欢不同的写法

好在我们有字符串模式, 字符串模式是前缀表达.

如果什么前缀也没有, 默认的字符串叫 s-string(slot).

````valkyrie
r"raw-string:    ${x + 1}\n"
s"slot-string:   ${x + 1}\n"
f"format-string: %s %f\s \n"
````

同样的, 你也可以用 `extension` 扩展你自己的字符串模式.

你已经猜到了, 使用 `string_prefix`, 这也是一致性的体现.

你能想到什么应用? 嵌入 json 对象? 嵌入 css 样式? 或者更炫酷的用法?


## 模式匹配

越来越多的语言采用模式匹配或者类似的语法, 模式匹配快成每个语言的标配了.

V 当然也有个高度一致, 可 desugar 的灵活模式匹配语法

### 字面量匹配

字面量匹配是标配

````valkyrie
match x {
    case 1      => "integer"
    case 1.0    => "decimal"
    case '1'    => "character"
    case "1"    => "string"
    case 1...4  => "range"
    case (1, 2) => "tuple"
    case [1, 2] => "list"
    _           => "something else"
}
````

### case 守卫

有时候模式匹配量需要一点条件判定, 这种情况下可以用 case 守卫

````valkyrie
match x {
    case x is Integer   => "x is an instance of type `Integer`"
    case x is Callablte => "x satisfies the trait bound `Callable`"
    case x in [1, 2, 3] => "x is one of [1, 2, 3]"
    case x if x < 0     => "x satisfies the condition x < 0"
    _                   => "none of the above conditions are met"
}
````

### case 解构

某些时候想要匹配某一段数据, 那么可以用 case 解构

````valkyrie
if case Point {x: a, y, ...p} = Point {x: 1, y: 2, z: 3, w: 4,} {
    print(a) /// 1
    print(y) /// 2
    print(p) /// {z: 3, w: 4}
}

if case Point(a, ..p, y) = Point(1, 2, 3, 4) {
    print(a) /// 1
    print(p) /// [2, 3]
    print(y) /// 4
}
````

### 自定义提取器

对于自定义的类, 可以定义 unapply 方法来自定义提取的数据.


````valkyrie
match input {
    case Regex(group0) => Integer::parse(group0),
}
/// desugar as unapply
if case Some(group0) = Regex::unapply(input) {
    Integer::parse(group0)
}
````


## 闭包和匿名函数

闭包也是一个现代化的语言必备的特性

考虑如下函数

````valkyrie
def doulbe_even(x) {
    match x {
        x if x % 2 => 2 * x,
        x          => x
    }
}
[1, 2, 3, 4].map(doulbe_even)
````

如果一个函数接受的最后一个参数是闭包, 那么可以省略 `()`

现在考虑把它写成匿名函数

````valkyrie
[1, 2, 3, 4].map {
    /// `(lambda (x) expr)` even longer than python 🤣
    lambda (x) match x {
        x if x % 2 => 2 * x,
        x          => x
    }
}
````

这个看起来也太复杂了, 这是完全形式的闭包, 只是作为 desugar 的结果而存在, 实际用不到

一般常用的是下面的 case 闭包:

````valkyrie
[1, 2, 3, 4].map {
    case x if x % 2 => 2 * x,
    case x          => x
}
````

还有一种简写方式叫 slot 闭包:

````valkyrie
[1, 2, 3, 4].map {
    if $0 % 2 {2 * $0} else {$0}
}
/// Looks like perl, maybe the ternary operator should be banned
[1, 2, 3, 4].map {$0 % 2 ? 2 * $0 : $0}
````


## 多态

有时候我们需要一些多态接口, 比如同时接受字符串和整数的函数

侵入性最强但是用起来最方便的是隐式类型转换

````valkyrie
/// First define ordinary type conversion
extends Integer: From<String> {
    def from(s) { Self::parse(i) }
}
/// `ImplicitFrom<T>` needs to meet trait bound `From<T>`
extends Integer: ImplicitFrom<String>;

def add_one(input: Integer): Integer {
    input + 1
}
/// Found type mismatch, try implicit type conversion
add_one("1") /// 2
````

其次是显式类型转换, 自动规约输入

````valkyrie
def add_one(auto input: Integer): Integer {
    input + 1
}
/// Found that the type does not match, call the `from` method
add_one("1") /// 2
````

比较规范的是使用基于 trait 的泛型静态派发

````valkyrie
def add_one<T>(input: T): Integer
for T: Into<Integer>
{
    input.into() + 1
}
````

以上这些方法都是非限定性的多态, 输入不需要预先确定.

但是有时候输入是固定的几类, 这就需要限定性多态.

限定性多态可以用并类型和和类型实现, 很多语言里不区分这两个, 甚至混淆了两者.

但是仔细想想 `Optional<Optional<T>>` 和 `Nullable<Nullable<T>>` 能一样吗?

````valkyrie
/// This is the sum type, tagged union
tagged Optional<T> {
    Some<T>,
    None,
}

/// This is the union type, untagged union
class Null {};
type Nullable<T> = T | Null;

Optional<Optional<T>> ==> Optional<Optional<T>>
Nullable<Nullable<T>> ==> Nullable<T>
````

````valkyrie
/// sum type matching
def add_one(input: Integer|String): Integer {
    let y = match input {
        x is Integer => x,
        x is String => Integer::parse(x)
    }
    y + 1
}

/// union type matching
tagged Canbe {
    Integer(Integer)
    String(String)
}

def add_one(input: Canbe): Integer {
    let y = match input {
        Canbe::Integer(x) => x,
        Canbe::String(x) => Integer::parse(x)
    }
    y + 1
}
````

## 专门设计的 REPL 模式

REPL 模式是指类似于 Mathematica, Observable 或者 Jupyter 的工作模式

### 时序与非时序模式

考虑如下代码:

````valkyrie
let second  = 1 + first;
let first  = 1;
````

在带时序的语言中, 这应该直接报错, 第一行先于第二行发生, 不能使用一个未声明未初始化的变量 `first`.

但是在无时序的语言中, 这是可以实现的, 因为所有声明都在同一时刻发生, 没有谁先谁后.

再考虑如下代码:

````valkyrie
let a = 1;
let a = 2;
````

在带时序的语言中, 显然第二次行应该覆盖第一行关于 `a` 的声明.

但是在无时序的语言中会报错, 因为所有声明都在同一时刻发生, 没有谁先谁后.

Valkyrie 中的作用域和闭包是有时序的, 但是也不能重复声明函数

而其他的 package, class, trait, tagged 都是无时序的, 因此禁止重复声明

### REPL 模式

但是在 REPL 模式下, package namespace 是时序的, 可以反复修改一个函数并覆盖掉之前这样很方便调试.

REPL 模式下所有未声明的变量默认是首次声明的可变变量, 这种设定借鉴了 Mathematica, 也很方便调试

REPL 模式下可以使用 `use?` 导入一个外部模块并允许反复导入, 以此实现热重载

这里 `?` 表示不要加入全局方法表, 因为一旦加入就会污染所有的定义, 这种污染是不可逆的.

REPL 模式可以使用 `¶` 和 `⁋` 获取历史输入输出, 相当于 Mathematica 的 `In`, `Out` 以及 `%`

## 基于 AST 的宏

基于 AST 的宏可能没有基于 Token 的宏那么强大, 但是你真的想在一个语言里写完全不同的另一个语言吗?

特别是 Token 宏的 IDE 支持性一般特别差, 带 TokenKind 的 AST 宏却能获得非常好的支持.

## IR 兼容性

Valkyrie 的语法并不是绝对稳定的, Valkyrie 会把源文件编译成单个的 IR 文件来屏蔽这种改变, 由此来获得前向兼容性.

Valkyrie 使用类似 Rust 的 Edition 发布模式.
